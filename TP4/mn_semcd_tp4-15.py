# -*- coding: utf-8 -*-
"""MN_SemCD_TP4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gf0LprX5oXp9dpVs--QOLaP_RpyEOzjs
"""

import pandas as pd
import re

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Especifica la ruta al dataset en Google Drive
file_path = "/content/drive/MyDrive/SEMCDS21/Entregable-4-DocExtra.csv"

try:
    ## PREPARACIÓN DE LOS DATOS

    # A. CARGA DE DATOS

    # Lee el archivo CSV con quotechar='"' para manejar las comillas dobles como text qualifier
    df = pd.read_csv(file_path, delimiter=',', quotechar='"', header=None)

    # Divide el archivo origen en columnas
    # Utiliza una expresión regular para dividir por comas fuera de las comillas dobles
    # Esta expresión regular busca comas que no estén dentro de comillas dobles
    df_dividido = df.iloc[:, 0].apply(lambda x: re.split(r',(?=(?:[^"]*"[^"]*")*[^"]*$)', x))

    # Presenta (para control) la cantidad de columnas antes de la transformación
    print(f"Cantidad de columnas antes de dividir: {df.shape[1]}")

    # Convierte la lista resultante en un DataFrame
    df_dividido = pd.DataFrame(df_dividido.tolist())

    # Presenta (para control) la cantidad de columnas despues de la transformación
    print(f"Cantidad de columnas después de dividir: {df_dividido.shape[1]}")

    # Elimina las últimas 2 columnas que no contienen datos
    # Selecciona todas las filas y todas las columnas excepto las dos últimas
    df_dividido = df_dividido.iloc[:, :-2]

    # Guarda el DataFrame dividido en un nuevo archivo CSV dentro de Google Drive, en la misma ruta
    # que se encuentra el dataset original. Este archivo destino (Entregable-4-DSFinal.csv) será el
    # utilizado para las visualizaciones.
    output_path = '/content/drive/MyDrive/SEMCDS21/Entregable-4-DSFinal.csv'
    df_dividido.to_csv(output_path, index=False)

    # B. REVISIÓN INICIAL DE LA ESTRUCTURA

    # Actualiza el nombre de la primera columna
    # Abre el dataset omitiendo la primera fila en la lectura
    df2 = pd.read_csv(output_path,skiprows=1)
    # Asigna el valor ID a la primera columna
    df2.rename(columns={df2.columns[0]: "ID"}, inplace=True)
    # Guarda los cambios
    df2.to_csv(output_path, index=False)

    # Verifica la cantidad de registros previo a quitar las 4 filas del csv.
    print("Cantidad de registros previo a quitar las 4 filas:", len(df2))

    # Elimina las filas 18884, 18885, 21521 y 51400
    # que no presentan un valor númerico en la primera columna
    # Restamos 1 a la fila tal como aparece en Excel para que correspondan a `skiprows`
    skip_rows = [18884 - 1, 18885 - 1, 21521 - 1, 51400 - 1]
    # Lee el archivo CSV omitiendo las filas especificadas
    df2 = pd.read_csv(output_path, skiprows=skip_rows)
    # Guarda los cambios en el archivo final
    df2.to_csv(output_path, index=False)

    # Verifica la cantidad de registros luego de quitar las 4 filas del csv.
    print("Cantidad de registros actuales:", len(df2))

    # Asegura de que los valores de la columna 'price' sean numéricos
    df2['price'] = pd.to_numeric(df2['price'], errors='coerce')

    # Obtiene el valor máximo de la columna 'price'
    max_price = df2['price'].max()

    # Obtiene el valor de 'ID' asociado al valor máximo de 'price'
    max_price_id = df2[df2['price'] == max_price]['ID'].iloc[0]

    # Imprime los resultados
    print(f"El valor máximo de 'price' es: {max_price}")
    print(f"El valor del campo 'ID' asociado al valor máximo es: {max_price_id}")

    # Asegura de que los valores de la columna 'price' sean numéricos
    df2['price'] = pd.to_numeric(df2['price'], errors='coerce')

    # Calcula estadísticas específicas
    media = df2['price'].mean()
    mediana = df2['price'].median()
    minimo = df2['price'].min()
    maximo = df2['price'].max()

    # Imprime resultados
    print(f"Media: {media}")
    print(f"Mediana: {mediana}")
    print(f"Valor mínimo: {minimo}")
    print(f"Valor máximo: {maximo}")

    # C. LIMPIEZA DE DATOS

    # Identifica valores nulos en nuestro dataframe actual
    print("Los valores nulos previo a la actualización son:")
    for column in df2.columns:
        print(f"{column:<20}{df2[column].isnull().sum()}")

    # Convierte la columna points a valores numéricos
    df2['points'] = pd.to_numeric(df2['points'], errors='coerce')
    # Actualiza con la mediana el campo points si tiene valor nulo
    df2['points'] = df2['points'].fillna(df2['points'].median())

    # Convierte la columna points a valores numéricos
    df2['price'] = pd.to_numeric(df2['price'], errors='coerce')
    # Actualiza con la mediana el campo price si tiene valor nulo
    df2['price'] = df2['price'].fillna(df2['price'].median())

    # Actualiza los siguientes campos con un valor determinado para identificarlos
    df2.loc[:, 'country'] = df2['country'].fillna('Desconocido_country')
    df2.loc[:, 'description'] = df2['description'].fillna('Desconocido_description')
    df2.loc[:, 'designation'] = df2['designation'].fillna('Desconocido_designation')
    df2.loc[:, 'province'] = df2['province'].fillna('Desconocido_province')
    df2.loc[:, 'region_1'] = df2['region_1'].fillna('Desconocido_region_1')
    df2.loc[:, 'region_2'] = df2['region_2'].fillna('Desconocido_region_2')
    df2.loc[:, 'taster_name'] = df2['taster_name'].fillna('Desconocido_taster_name')
    df2.loc[:, 'taster_twitter_handle'] = df2['taster_twitter_handle'].fillna('Desconocido_taster_twitter_handle')
    df2.loc[:, 'title'] = df2['title'].fillna('Desconocido_title')
    df2.loc[:, 'variety'] = df2['variety'].fillna('Desconocido_variety')
    df2.loc[:, 'winery'] = df2['winery'].fillna('Desconocido_winery')

    # Guarda los cambios en el archivo destino
    df2.to_csv(output_path, index=False)

    # Lista los valores nulos luego de actualizar
    print("Los valores nulos luego de actualizar son:")
    for column in df2.columns:
        print(f"{column:<20}{df2[column].isnull().sum()}")

    # VISUALIZACIONES

    ## VISUALIZACIÓN 1: Relación entre Precio y Puntuación
    # Filtrar filas con datos válidos de precio y puntuación
    filtered_data = df2.dropna(subset=['price', 'points'])

    # Crea el gráfico de dispersión
    plt.figure(figsize=(10, 6))
    plt.scatter(filtered_data['price'], filtered_data['points'], alpha=0.5)
    plt.title('Relación entre Precio y Puntuación de Vinos')
    plt.xlabel('Precio (USD)')
    plt.ylabel('Puntuación')
    plt.grid(True)
    plt.show()

    ## VISUALIZACIÓN 2: Comparación de Puntuaciones entre diferentes variedades de Vino
    # Filtra datos no nulos en las columnas 'points' y 'variety'
    df2 = df2.dropna(subset=['points', 'variety'])

    # Filtra las 5 variedades más frecuentes en el dataset
    top_5_varieties = df2['variety'].value_counts().head(5).index

    # Filtra el dataframe para incluir solo las 5 variedades más frecuentes
    df_top_5_varieties = df2[df2['variety'].isin(top_5_varieties)]

    # Agrupa los datos por 'variety' y calcular la media de las puntuaciones
    mean_points_by_variety = df_top_5_varieties.groupby('variety')['points'].mean().sort_values(ascending=False)

    # Configura el estilo del gráfico
    sns.set(style="whitegrid")

    # Crea el gráfico de barras
    plt.figure(figsize=(10, 6))
    mean_points_by_variety.plot(kind='bar', color='skyblue', edgecolor='black')

    # Configura títulos y etiquetas
    plt.title('Comparación de Puntuaciones Promedio de las 5 Variedades de Vino Más Frecuentes', fontsize=16)
    plt.xlabel('Variedad de Vino', fontsize=14)
    plt.ylabel('Puntuación Promedio', fontsize=14)

    # Rota las etiquetas del eje X para una mejor visualización
    plt.xticks(rotation=45)

    # Muestra el gráfico
    plt.tight_layout()
    plt.show()

    # VISUALIZACIÓN 3: Distribución de precios de vino
    # Considera el DataFrame con el nombre df2 y la columna 'price'
    df2['price'] = pd.to_numeric(df2['price'], errors='coerce')

    # Crea el histograma para la distribución de precios
    plt.figure(figsize=(10, 6))
    sns.histplot(df2['price'], bins=50, kde=True, color='blue')

    # Configura título y etiquetas
    plt.title('Distribución de Precios de Vino', fontsize=16)
    plt.xlabel('Precio (USD)', fontsize=14)
    plt.ylabel('Frecuencia', fontsize=14)

    plt.tight_layout()
    plt.show()

except Exception as e:
    print(f"Error al procesar el archivo: {e}")